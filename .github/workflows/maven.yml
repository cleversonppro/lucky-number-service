# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on: push

env:
  ARGO_REPO_TOKEN: ${{ secrets.ARGO_TOKEN }}
  ARGO_PROJECT: funds-flow

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'zulu'
        cache: maven
    - name: Build with Maven
      run: mvn -B package --file pom.xml

    # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
    - name: Update dependency graph
      uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6

  deploy_to_dev:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    environment: DEV
    steps:
      - name: Deploying to DEV
        env:
          APPLICATION_ENVIRONMENT: development
          HELM_RELEASE_NAME: my_app2
        run: | 
          echo "Deploying to DEV. Branch: ${{ github.ref }}"
          echo "MY_VARIABLE = ${{ vars.MY_VARIABLE }}"
          
          git clone https://user:$ARGO_REPO_TOKEN@github.com/cleversonppro/argo-cd ./argo_repo
          ls argo_repo
          echo "Project folder: argo_repo/${APPLICATION_ENVIRONMENT}/${ARGO_PROJECT}"
          cd argo_repo/${APPLICATION_ENVIRONMENT}/${ARGO_PROJECT}
          ls
          
          cat << EOF > ${HELM_RELEASE_NAME}.yaml
          apiVersion: argoproj.io/v1alpha1
          kind: Application
          metadata:
            name: ${APPLICATION_ENVIRONMENT}
            namespace: argocd
            finalizers:
              - resources-finalizer.argocd.argoproj.io
          EOF
          
          git config user.email 'pipeline@ppro.com'
          git config user.name 'Gitlab CI Latam'
          cat ${HELM_RELEASE_NAME}.yaml
          git add ${HELM_RELEASE_NAME}.yaml
          git commit -m "${{ github.event.head_commit.message }}"
          git push
          
          


  deploy_to_prod:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
    environment: PROD
    steps:
      - name: Deploying to PROD
        run: | 
          echo "Deploying to PROD. Branch: ${{ github.ref }}"
          echo "MY_VARIABLE = ${{ vars.MY_VARIABLE }}"
